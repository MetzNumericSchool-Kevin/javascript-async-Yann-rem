/**
 * Code de base, ne pas modifier
 */

// D√©finition
const boutonVoyageHTML = document.querySelector(".btn-voyage");
const localisationEpoqueHTML = document.querySelector(".localisation_epoque");
const loaderEpoqueHTML = document.querySelector(".voyage_en_cours");
const loaderArtefactHTML = document.querySelector(".recherche_en_cours");
const listeArtefactHTML = document.querySelector(".liste_artefacts");
const formChoixEpoqueHtml = document.querySelector(".form__choix_epoque");
const formRechercheArtefact = document.querySelector(".form__recherche_artefact");

const epoques = {
  romaine: "Romaine",
  medievale: "M√©dievale",
  jurassique: "Jurassique",
};

const creerLesChoixEpoque = (epoques) => {
  const selectHtml = formChoixEpoqueHtml.querySelector("select");
  Object.entries(epoques).forEach(([id_epoque, nom_epoque]) => {
    const option = document.createElement("option");
    option.value = id_epoque;
    option.text = nom_epoque;
    selectHtml.appendChild(option);
  });
};

function generationNombreAleatoireEntre(min, max) {
  return Math.floor(Math.random() * (max - min + 1) + min);
}

const afficherDestination = (nomEpoque) => (localisationEpoqueHTML.textContent = nomEpoque);

// Execution
formChoixEpoqueHtml.addEventListener("submit", (event) => {
  event.preventDefault();
  const epoque = new FormData(formChoixEpoqueHtml).get("epoque");

  if (!epoque) {
    alert("Choisie une √©poque de voyage temporel Chronos !");
    return;
  }

  quandEpoqueChoisie(epoque);
});

formRechercheArtefact.addEventListener("submit", (event) => {
  event.preventDefault();
  const artefact = new FormData(formRechercheArtefact).get("artefact");

  if (!artefact) {
    alert("Choisie un artefact √† collecter !");
    return;
  }

  quandRechercheArtefact(artefact);
});

const afficherRechercheArtefact = ({ artefact, epoque, success = true }) => {
  const li = document.createElement("li");
  li.textContent = `${success ? "‚úÖ" : "‚ùå"} ${artefact} (Epoque ${epoque})`;
  listeArtefactHTML.appendChild(li);
};

/**
 * Votre partie commence ici, la partie modifiable par vos soins
 */
let nomEpoqueActuelle = localisationEpoqueHTML.textContent;

creerLesChoixEpoque(epoques);

// Exercice 1 : Le T√©l√©porteur Temporel

/**
 * Fonction pour simuler un voyage temporel.
 * @param {string} destination - √âpoque de destination
 * @param {Function} callback  - Fonction de rappel √† ex√©cuter une fois le voyage termin√©
 */
const voyagerTemps = (destination, callback) => {
  setTimeout(() => {
    callback(destination);
  }, generationNombreAleatoireEntre(1000, 3000));
};

/**
 * Fonction d√©clench√©e apr√®s la soumission du formulaire de voyage temporel.
 * Elle met √† jour l'√©poque et g√®re l'affichage du loader pendant le voyage.
 * @param {string} nomEpoque - √âpoque s√©lectionn√©e
 */
const quandEpoqueChoisie = (nomEpoque) => {
  nomEpoqueActuelle = nomEpoque;
  localisationEpoqueHTML.style.display = "none";
  loaderEpoqueHTML.style.display = "inline-block";
  voyagerTemps(nomEpoqueActuelle, (epoque) => {
    afficherDestination(epoque);
    loaderEpoqueHTML.style.display = "none";
    localisationEpoqueHTML.style.display = "inline-block";
  });
};

// Exercice 2 : La Collecte d'Artefact Myst√®re

/**
 * Fonction pour simuler la collecte d'un artefact.
 * @param {string} objet      - Artefact √† collecter
 * @param {Function} callback - Fonction de rappel √† ex√©cuter une fois l'artefact collect√©
 */
const collecterArtefact = (nom, callback) => {
  setTimeout(() => {
    callback(nom);
  }, generationNombreAleatoireEntre(1000, 3000));
};

/**
 * Fonction d√©clench√©e apr√®s la soumission du formulaire de recherche d'artefacts.
 * Elle affiche un message indiquant si la collecte d'un artefact a r√©ussi ou √©chou√©.
 * La r√©ussite ou l'√©chec est d√©termin√© al√©atoirement.
 *
 * @param {string} artefact - Artefact recherch√©
 */
const quandRechercheArtefact = (artefact) => {
  loaderArtefactHTML.style.display = "block";
  collecterArtefact(artefact, (nomArtefact) => {
    // Objet contenant les informations de l'artefact
    const artefactInfos = { artefact: nomArtefact, epoque: nomEpoqueActuelle };
    loaderArtefactHTML.style.display = "none";
    Math.random() >= 0.5
      ? afficherRechercheArtefact({ ...artefactInfos }) // Succ√®s (par d√©faut)
      : afficherRechercheArtefact({ ...artefactInfos, success: false }); // √âchec (explicite)
  });
};

// Exercice 3 : La Mission Temporelle Complexe

/**
 * Fonction pour afficher un message indiquant si la collecte d'un artefact a r√©ussi ou √©chou√©.
 * La r√©ussite ou l'√©chec est d√©termin√© al√©atoirement.
 *
 * @param {string} artefact - Artefact √† collecter
 * @param {string} epoque   - √âpoque
 */
const logCollecte = (artefact, epoque) => {
  console.log(`${Math.random() >= 0.5 ? "‚úÖ" : "‚ùå"} ${artefact} (√âpoque ${epoque})`);
};

/**
 * Fonction pour simuler une mission temporelle complexe avec des √©tapes imbriqu√©es.
 * L'objectif est de reproduire le probl√®me du "callback hell".
 */
const missionTemporelleComplexe = () => {
  let epoqueActuelle = null;
  console.log("üï∞Ô∏è D√©but de la mission temporelle...");

  // √âtape 1 : Voyager √† l'√©poque m√©di√©vale
  voyagerTemps("M√©di√©vale", (epoque) => {
    epoqueActuelle = epoque;
    console.log(`üìç Arriv√© √† l'√©poque ${epoque}`);

    // √âtape 2 : Collecter une √©p√©e de chevalier
    collecterArtefact("√âp√©e de chevalier", (artefact) => {
      logCollecte(artefact, epoqueActuelle);

      // √âtape 3 : Voyager √† l'√©poque Romaine
      voyagerTemps("Romaine", (epoque) => {
        epoqueActuelle = epoque;
        console.log(`üìç Arriv√© √† l'√©poque ${epoque}`);

        // √âtape 4 : Collecter un bouclier romain
        collecterArtefact("Bouclier romain", (artefact) => {
          logCollecte(artefact, epoqueActuelle);

          // √âtape 5 : Collecter une √©p√©e romaine
          collecterArtefact("√âp√©e romaine", (artefact) => {
            logCollecte(artefact, epoqueActuelle);

            console.log("üèÅ Fin de la mission temporelle");
          });
        });
      });
    });
  });
};

// missionTemporelleComplexe();

// Exercice 4 : Je te promet des voyages temporels sans tracas !

/**
 * Fonction pour simuler un voyage temporel.
 * La promesse est r√©solue apr√®s un d√©lai al√©atoire.
 *
 * @param {string} destination - √âpoque de destination
 * @returns {Promise<string>}  - Promesse qui se r√©sout avec la destination atteinte
 */
const voyagerTemps2 = (destination) => {
  return new Promise((resolve) => {
    setTimeout(() => {
      console.log(`üìç Arriv√© √† l'√©poque ${destination}`);
      resolve(destination);
    }, generationNombreAleatoireEntre(1000, 3000));
  });
};

/**
 * Fonction pour simuler la collecte d'un artefact.
 * La collecte r√©ussit ou √©choue de mani√®re al√©atoire.
 *
 * @param {string} artefact                                 - Artefact √† collecter
 * @param {string} epoque                                   - √âpoque
 * @returns {Promise<{ artefact: string, epoque: string }>} - Promesse qui se r√©sout avec une collecte r√©ussie, sinon rejet avec une erreur.
 */
const collecterArtefact2 = (artefact, epoque) => {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      if (Math.random() >= 0.5) {
        console.log(`‚úÖ ${artefact} (√âpoque ${epoque})`);
        resolve({ artefact, epoque });
      } else {
        reject(new Error(`‚ùå ${artefact} (√âpoque ${epoque})`));
      }
    }, generationNombreAleatoireEntre(1000, 3000));
  });
};

/**
 * Fonction pour simuler une mission temporelle complexe.
 * Utilise des promesses cha√Æn√©es pour g√©rer les voyages et les collectes de mani√®re asynchrone.
 */
// const missionTemporelleComplexe2 = () => {
//   console.log("üï∞Ô∏è D√©but de la mission temporelle...");
//   voyagerTemps2("M√©di√©vale")
//     .then((epoque) => collecterArtefact2("√âp√©e de chevalier", epoque))
//     .then(() => voyagerTemps2("Romaine"))
//     .then((epoque) => collecterArtefact2("Bouclier romain", epoque))
//     .then(({ epoque }) => collecterArtefact2("√âp√©e romaine", epoque))
//     .then(() => console.log("üèÅ Fin de la mission temporelle"))
//     .catch((erreur) => console.error(erreur.message));
// };

/**
 * Fonction pour simuler une mission temporelle complexe.
 * Utilise des promesses cha√Æn√©es pour g√©rer les voyages et les collectes de mani√®re asynchrone.
 */
const missionTemporelleComplexe2 = () => {
  console.log("‚è≥ D√©but de la mission temporelle...");
  voyagerTemps2("M√©di√©vale")
    .then((epoque) =>
      collecterArtefact2("√âp√©e de chevalier", epoque).catch((erreur) => {
        console.error(erreur.message);
        return null;
      })
    )
    .then(() => voyagerTemps2("Romaine"))
    .then((epoque) =>
      collecterArtefact2("Bouclier romain", epoque).catch((erreur) => {
        console.error(erreur.message);
        return null;
      })
    )
    .then(() =>
      collecterArtefact2("√âp√©e romaine", "Romaine").catch((erreur) => {
        console.error(erreur.message);
        return null;
      })
    )
    .then(() => console.log("üèÅ Fin de la mission temporelle"));
};

missionTemporelleComplexe2();
